;	------------------------------------------------------------------------------
;	Title:Communication avec joypad 2
;
;	Copyright (c) LF 16/031999
;	Code generated by JagStudio98 for DEVPAC 3, copyright FAVARD laurent 1996-1998
;
;	Business:Programme de test joypad 2
;	http://wwwlinux.utc.fr/~atari.html
;	------------------------------------------------------------------------------

		include		".\Include\sysapi.inc"
		include		".\Include\jag.inc"

		OUTPUT		joycom.Jag

		OPT	D-			; No debugging

		dc.b	'JAGR'			; Magic to skip Devpac Header
		dc.w	3				; JagOS 3 - Receive & Run
		dc.l	$5000			; Upload adress
		dc.l	C_End-C_Start	; Lenght of Jaguar Code
		dc.l	$5000			; Start address code


		TEXT
		Org		$5000


C_Start:
;	------------------------------------------------------------------------------
PRINTF	MACRO
		movem.l		d0-d7/a0-a6,-(sp)
		pea.l		\1(pc)
		move.w		#DBMSG,-(sp)
		trap		#SYSTEM
		addq.l		#6,sp
		movem.l		(sp)+,d0-d7/a0-a6
		ENDM

;WAITKEY	MACRO
;		movem.l		d0-d7/a0-a6,-(sp)
;		jsr			JoyPad
;		movem.l		(sp)+,d0-d7/a0-a6
;		ENDM

;	------------------------------------------------------------------------------
;	>>> Body program by user

ESC	equ	$1B

		jsr			JPinit
		PRINTF		Hello
				
.loop:	jsr			JPGet
		tst.l		d0
		blt.s		.loop

		cmpi.b		#'q',d0
		beq.s		Pterm

		move.w		d0,-(sp)
		jsr			JPSend
		addq.l		#2,sp

		bra.s		.loop
		
;	------------------------------------------------------------------------------

Pterm:	move.w		d0,-(sp)
		jsr			JPSend
		addq.l		#2,sp

		PRINTF		Bye
		move.w		#PTERM,-(sp)
		trap		#SYSTEM
		illegal

;	------------------------------------------------------------------------------
;
;
;		Joypad #2 initialisazition. Set STROBE High
;	------------------------------------------------------------------------------

J7_0_OUT	equ		$8000
J7_HIGH		equ		$81F0		;$80
J7_LOW		equ		$8100
B2			equ		2
B3			equ		3

JPinit:		move.l		a0,-(sp)
			lea			$F14000,a0
			move.w		#J7_HIGH,(a0)
			move.l		(sp)+,a0
			rts
		
;	------------------------------------------------------------------------------
;
;
;		Byte is send with 3 bits blocks, with the LSBs to the MSBs.
;	------------------------------------------------------------------------------

OFF_BYTE	set		6*4

JPSend:	movem.l		d1-d3/a0-a1,-(sp)

		move.w		OFF_BYTE(sp),d0
		andi.w		#$FF,d0
		move.w		#2,d1								;	3 loop
		lea			$F14000,a0
		lea			3(a0),a1
		move.w		#J7_HIGH,d3							;	set BUSY line HIGH
		
.loop:	move.w		d3,(a0)

		move.w		d0,d2								;	take data to send
		andi.w		#$07,d2								;	Keep only 3 LSBs
		lsl.w		#4,d2								;	move to J4...J6 position
		ori.w		#J7_LOW,d2							;	ORed with BUSY line LOW
		move.w		d2,(a0)								;	put data and strobe

.wait1:	btst		#B3,(a1)							;	wait until STROBE line HIGH
;		beq			.wait1	
		bne			.wait1	
		
		move.w		d3,(a0)								;	set BUSY line high		

.wait2:	btst		#B3,(a1)							;	wait until STROBE line LOW
;		bne			.wait2
		beq			.wait2
			
		lsr.w		#3,d0								;	next 3 bits to send
		dbra		d1,.loop							;	go to main loop
				
.End:	move.w		d3,(a0)								
		movem.l		(sp)+,d1-d3/a0-a1
		move.l		#1,d0
		rts
		
;	------------------------------------------------------------------------------


JPGet:	movem.l		d1-d4/a0-a1,-(sp)

		move.w		#1,d1								;	2 loop
		lea			$F14000,a0
		lea			3(a0),a1
		move.w		#12,d4								;	initial left shift
		clr.l		d3									;	STROBE Jag High
		clr.l		d0									;	contains byte to get from host

		btst		#B3,(a1)							;	STROBE low => no data
;		beq.s		.NoData		
		bne.s		.NoData		

.loop:	btst		#B3,(a1)							;	STROBE low => wait STROBE HIGH
;		beq.s		.loop
		bne.s		.loop
		
	;	PRINTF		texte1
		
		move.w		(a0),d2								;	get data from J15-J12
		andi.w		#$F000,d2
		lsr.w		d4,d2								;	move to d0-d3 position (and d4-d7 for the next one)
		or.w		d2,d0

	;	PRINTF		texte2
		
		move.w		#J7_LOW,(a0)						;	set BUSY line LOW		
		
.wait1:	btst		#B3,(a1)							;	wait until STROBE is LOW
;		bne.s		.wait1
		beq.s		.wait1

	;	PRINTF		texte3

		move.w		#J7_HIGH,(a0)						;	set BUSY line HIGH
		
		subi.w		#4,d4
		dbra		d1,.loop
		
	;	PRINTF		texte4
		
.Ok		movem.l		(sp)+,d1-d4/a0-a1
		rts

.NoData:movem.l		(sp)+,d1-d4/a0-a1
		move.l		#-1,d0
		rts

;	------------------------------------------------------------------------------
;Joypad call system

;JoyPad:
;.Read		move.l		#JoyPad1State,-(sp)
;			move.l		#JoyPad1Edge,-(sp)							
;			move.w		#GET_JOYPAD,-(sp)
;			trap		#SYSTEM
;			add.l		#10,sp
					
;			move.l		JoyPad1Edge,d0	

;.ck_a:		btst.l		#FIRE_A,d0								; START cardridge
;			beq.s		.Read
			
;			rts
		
;	------------------------------------------------------------------------------
		DATA
		EVEN

Hello:	dc.b	"Runing",0
Bye:	dc.b	"Bye!",0
		
;Chaine:	dc.b	"ABCDEFGHIJKLMNOPQRSTUVWXYZ",13,10,0

;texte1:	dc.b		"STRB is HIGH",0
;texte2:	dc.b		"data ok, set BUSY LOW",0		
;texte3:	dc.b		"STRB is LOW, set BUSY HIGH",0
;texte4:	dc.b		"All done",0

;	------------------------------------------------------------------------------

;		BSS
;		EVEN

;JoyPad1Edge:	ds.l	1						; Joypad 1 buttons's edges
;JoyPad2Edge:	ds.l	1						; Joypad 2 buttons's edges
;JoyPad1State:	ds.l	1						; Joypad 1 buttons's status						
;JoyPad2State:	ds.l	1						; Joypad 2 buttons's status

;	------------------------------------------------------------------------------
C_End:
		END
